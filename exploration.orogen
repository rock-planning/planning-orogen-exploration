    name "exploration"
version "0.1"

using_library "envire"
using_library "exploration"
import_types_from 'base'
import_types_from 'envire'
import_types_from "exploration/ExplorationPlannerTypes.hpp"
import_types_from "explorationTypes.hpp"

import_types_from "base"
    
task_context "Task" do
    needs_configuration

    property("traversability_map_id", "std/string", "/traversability").
    doc("Try to extract this traversability map, otherwise the first traversability map will be used (if it is the only one)")
    
    property("polygons", "/std/vector<exploration/ConfPolygon>").
    doc("List of polygons that represents the robot's view")
    
    property("min_goal_distance", "double", 1.0).
    doc("Since some planners don't work very well with goalPoses too close to the robot's pose, a minimal goalDistance (in m) can be set. Goals that are not satisfying this condition will be thrown out.")
    
    property("robot_length_x_m", "double", 1.0).
	doc("Length of the robot in meter")
	
	property("robot_width_y_m", "double", 1.0).
    doc("Width of the robot in meter")
    
    input_port('envire_environment_in', ro_ptr('std/vector</envire/BinaryEvent>')).
        doc("Traversability map. Has to be received once")

    output_port('goals_out', 'std/vector<base/samples/RigidBodyState>').
        doc "Calculated goal, using x and y"

    input_port("pose_samples", "base/samples/RigidBodyState").
        needs_reliable_connection.
        doc "Robot pose in traversability frame"

    output_port('explore_map', ro_ptr('std/vector</envire/BinaryEvent>')).
        doc("Debug port, gives the current explored map as envire::Traversability map")

    operation("calculateGoals").
        doc("Triggers the calculation of a new list of goals")
        
    port_driven 'envire_environment_in', 'pose_samples'
    #periodic(1.0)
end
